#!/bin/bash
# ABOUTME: Main yadm bootstrap script that dispatches to platform-specific scripts
# ABOUTME: Detects platform and runs appropriate bootstrap configuration

set -euo pipefail

# Script configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly BOOTSTRAP_DIR="${SCRIPT_DIR}/bootstrap.d"
readonly CONFIG_FILE="${YADM_BOOTSTRAP_CONFIG:-$HOME/.config/yadm/bootstrap.conf}"

# Ensure bootstrap directory exists
if [[ ! -d "$BOOTSTRAP_DIR" ]]; then
    echo "Error: Bootstrap directory not found: $BOOTSTRAP_DIR" >&2
    echo "Creating bootstrap directory..." >&2
    mkdir -p "$BOOTSTRAP_DIR"
fi

# Source common functions if available
if [[ -f "${BOOTSTRAP_DIR}/common.sh" ]]; then
    source "${BOOTSTRAP_DIR}/common.sh"
else
    # Minimal fallback logging
    log_info() { echo "[INFO] $*"; }
    log_error() { echo "[ERROR] $*" >&2; }
    log_success() { echo "[SUCCESS] $*"; }
    die() { echo "[FATAL] $*" >&2; exit 1; }
fi

# Load configuration if exists
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        log_info "Loading configuration from $CONFIG_FILE"
        source "$CONFIG_FILE"
    fi
}

# Detect platform
detect_platform() {
    local system_type=$(uname -s)
    local arch_type=$(uname -m)
    
    case "$system_type" in
        Darwin)
            echo "darwin"
            ;;
        Linux)
            echo "linux"
            ;;
        *)
            die "Unsupported platform: $system_type"
            ;;
    esac
}

# Display usage information
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

yadm bootstrap script with platform detection

OPTIONS:
    -h, --help          Show this help message
    -d, --dry-run       Run in dry-run mode (show what would be done)
    -p, --platform      Override platform detection (darwin/linux)
    -c, --config FILE   Use custom configuration file
    -v, --verbose       Enable verbose logging

ENVIRONMENT VARIABLES:
    DRY_RUN             Set to 'true' for dry-run mode
    LOG_FILE            Custom log file location
    YADM_BOOTSTRAP_CONFIG   Custom config file location

EXAMPLES:
    # Normal run
    $0

    # Dry run to see what would happen
    $0 --dry-run

    # Run with custom config
    $0 --config ~/.config/yadm/custom.conf

EOF
}

# Parse command line arguments
parse_args() {
    local platform_override=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -d|--dry-run)
                export DRY_RUN="true"
                log_info "Dry-run mode enabled"
                shift
                ;;
            -p|--platform)
                platform_override="$2"
                shift 2
                ;;
            -c|--config)
                CONFIG_FILE="$2"
                shift 2
                ;;
            -v|--verbose)
                export VERBOSE="true"
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                usage
                exit 1
                ;;
        esac
    done
    
    echo "$platform_override"
}

# Main bootstrap function
main() {
    log_info "Starting yadm bootstrap"
    log_info "Bootstrap directory: $BOOTSTRAP_DIR"
    
    # Parse arguments
    local platform_override=$(parse_args "$@")
    
    # Load configuration
    load_config
    
    # Detect or use override platform
    local platform="${platform_override:-$(detect_platform)}"
    local platform_script="${BOOTSTRAP_DIR}/${platform}.sh"
    
    log_info "Detected platform: $platform"
    log_info "Architecture: $(uname -m)"
    
    # Check if platform script exists
    if [[ ! -f "$platform_script" ]]; then
        die "Platform script not found: $platform_script"
    fi
    
    # Make sure platform script is executable
    if [[ ! -x "$platform_script" ]]; then
        log_info "Making platform script executable"
        chmod +x "$platform_script"
    fi
    
    # Run platform-specific bootstrap
    log_info "Running platform bootstrap: $platform_script"
    
    if [[ "${DRY_RUN:-false}" == "true" ]]; then
        log_info "[DRY RUN] Would execute: $platform_script"
    else
        exec "$platform_script"
    fi
    
    log_success "Bootstrap completed successfully"
}

# Run main function with all arguments
main "$@"